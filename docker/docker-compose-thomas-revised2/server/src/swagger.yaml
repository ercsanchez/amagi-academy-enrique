swagger: '2.0'
info:
  version: 1.0.0
  title: Node with Docker
  license:
    name: Proprietary
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
paths:
  '/swagger.json': 
    get:
      tags:
        - Spec
      # operationID: retrieveSpec
      description: Retrieve OpenAPI spec.
      responses:
        '200':
          description: Successful
          schema:
            type: object
  '/register':
    post:
      description: Admin registers a new user
      # operationID: adminRegisterUser
      tags:
        - Register
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRegisterBase'
      responses:
        '200':
          description: User registered
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            type: object    
  '/user/{email}': 
    get:
      description: Gets a user by email
      # operationID: getUserInfo
      tags:
        - GetUser
      parameters:
        - name: email
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User details queried
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        '404':
          description: User not found
          schema:
            type: object            
        default:
          description: Unexpected error
          schema:
            type: object
    put:
      description: Update user's info
      # operationID: updateUserInfo
      tags:
        - UpdateUser
      parameters:
        - name: email 
          in: path
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdateBase'
      responses:
        '200':
          description: User info updated
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            type: object  
    delete:
      description: Delete user
      # operationID: deleteUser
      tags:
        - DeleteUser
      parameters:
        - name: email 
          in: path
          required: true
          type: string
      responses:
        '200':
          description: User deleted
          schema:
            type: object
        '400':
          description: Bad Request
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            type: object              
definitions:
  UserRegisterBase:
    required:
      - first_name
      - address
      - password
      - email
    type: object
    properties:
      first_name:
        type: string
      address:
        type: string
      password:
        type: string 
      email:
        type: string
  UserUpdateBase:
    required:
      - first_name
      - address
      - email
      - password
    type: object
    # how to make the properties optional???
    # only password should be required
    properties:
      first_name:
        type: string
      address:
        type: string
      password:
        type: string 
      email:
        type: string

# parameters:
#   email:
#     name: email
#     in: path
#     required: true
#     type: string


